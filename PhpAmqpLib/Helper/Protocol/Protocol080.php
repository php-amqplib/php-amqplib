<?php

/* This file was autogenerated by spec/parser.php - Do not modify */

namespace PhpAmqpLib\Helper\Protocol;

use PhpAmqpLib\Wire\AMQPWriter;
use PhpAmqpLib\Wire\AMQPReader;

class Protocol080
{
    /**
     * @param int $versionMajor
     * @param int $versionMinor
     * @param mixed $serverProperties
     * @param string $mechanisms
     * @param string $locales
     * @return array
     */
    public function connectionStart(
        $versionMajor = 0,
        $versionMinor = 8,
        $serverProperties,
        $mechanisms = 'PLAIN',
        $locales = 'en_US'
    ) {
        $writer = new AMQPWriter();
        $writer->writeOctet($versionMajor);
        $writer->writeOctet($versionMinor);
        $writer->writeTable(empty($serverProperties) ? array() : $serverProperties);
        $writer->writeLongstr($mechanisms);
        $writer->writeLongstr($locales);
        return array(10, 10, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function connectionStartOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readTable();
        $response[] = $reader->readShortstr();
        $response[] = $reader->readLongstr();
        $response[] = $reader->readShortstr();
        return $response;
    }

    /**
     * @param string $challenge
     * @return array
     */
    public function connectionSecure($challenge)
    {
        $writer = new AMQPWriter();
        $writer->writeLongstr($challenge);
        return array(10, 20, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function connectionSecureOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readLongstr();
        return $response;
    }

    /**
     * @param int $channelMax
     * @param int $frameMax
     * @param int $heartbeat
     * @return array
     */
    public function connectionTune($channelMax = 0, $frameMax = 0, $heartbeat = 0)
    {
        $writer = new AMQPWriter();
        $writer->writeShort($channelMax);
        $writer->writeLong($frameMax);
        $writer->writeShort($heartbeat);
        return array(10, 30, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function connectionTuneOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readShort();
        $response[] = $reader->readLong();
        $response[] = $reader->readShort();
        return $response;
    }

    /**
     * @param string $virtualHost
     * @param string $capabilities
     * @param bool $insist
     * @return array
     */
    public function connectionOpen($virtualHost = '/', $capabilities = '', $insist = false)
    {
        $writer = new AMQPWriter();
        $writer->writeShortstr($virtualHost);
        $writer->writeShortstr($capabilities);
        $writer->writeBits(array($insist));
        return array(10, 40, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function connectionOpenOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readShortstr();
        return $response;
    }

    /**
     * @param string $host
     * @param string $knownHosts
     * @return array
     */
    public function connectionRedirect($host, $knownHosts = '')
    {
        $writer = new AMQPWriter();
        $writer->writeShortstr($host);
        $writer->writeShortstr($knownHosts);
        return array(10, 50, $writer);
    }

    /**
     * @param int $replyCode
     * @param string $replyText
     * @param int $classId
     * @param int $methodId
     * @return array
     */
    public function connectionClose($replyCode, $replyText = '', $classId, $methodId)
    {
        $writer = new AMQPWriter();
        $writer->writeShort($replyCode);
        $writer->writeShortstr($replyText);
        $writer->writeShort($classId);
        $writer->writeShort($methodId);
        return array(10, 60, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function connectionCloseOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**
     * @param string $outOfBand
     * @return array
     */
    public function channelOpen($outOfBand = '')
    {
        $writer = new AMQPWriter();
        $writer->writeShortstr($outOfBand);
        return array(20, 10, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function channelOpenOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**
     * @param bool $active
     * @return array
     */
    public function channelFlow($active)
    {
        $writer = new AMQPWriter();
        $writer->writeBits(array($active));
        return array(20, 20, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function channelFlowOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readBit();
        return $response;
    }

    /**
     * @param int $replyCode
     * @param string $replyText
     * @param array $details
     * @return array
     */
    public function channelAlert($replyCode, $replyText = '', $details = array())
    {
        $writer = new AMQPWriter();
        $writer->writeShort($replyCode);
        $writer->writeShortstr($replyText);
        $writer->writeTable(empty($details) ? array() : $details);
        return array(20, 30, $writer);
    }

    /**
     * @param int $replyCode
     * @param string $replyText
     * @param int $classId
     * @param int $methodId
     * @return array
     */
    public function channelClose($replyCode, $replyText = '', $classId, $methodId)
    {
        $writer = new AMQPWriter();
        $writer->writeShort($replyCode);
        $writer->writeShortstr($replyText);
        $writer->writeShort($classId);
        $writer->writeShort($methodId);
        return array(20, 40, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function channelCloseOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**
     * @param string $realm
     * @param bool $exclusive
     * @param bool $passive
     * @param bool $active
     * @param bool $write
     * @param bool $read
     * @return array
     */
    public function accessRequest(
        $realm = '/data',
        $exclusive = false,
        $passive = true,
        $active = true,
        $write = true,
        $read = true
    ) {
        $writer = new AMQPWriter();
        $writer->writeShortstr($realm);
        $writer->writeBits(array($exclusive, $passive, $active, $write, $read));
        return array(30, 10, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function accessRequestOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readShort();
        return $response;
    }

    /**
     * @param int $ticket
     * @param string $exchange
     * @param string $type
     * @param bool $passive
     * @param bool $durable
     * @param bool $autoDelete
     * @param bool $internal
     * @param bool $nowait
     * @param array $arguments
     * @return array
     */
    public function exchangeDeclare(
        $ticket = 1,
        $exchange,
        $type = 'direct',
        $passive = false,
        $durable = false,
        $autoDelete = false,
        $internal = false,
        $nowait = false,
        $arguments = array()
    ) {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($exchange);
        $writer->writeShortstr($type);
        $writer->writeBits(array($passive, $durable, $autoDelete, $internal, $nowait));
        $writer->writeTable(empty($arguments) ? array() : $arguments);
        return array(40, 10, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function exchangeDeclareOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**
     * @param int $ticket
     * @param string $exchange
     * @param bool $ifUnused
     * @param bool $nowait
     * @return array
     */
    public function exchangeDelete($ticket = 1, $exchange, $ifUnused = false, $nowait = false)
    {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($exchange);
        $writer->writeBits(array($ifUnused, $nowait));
        return array(40, 20, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function exchangeDeleteOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**
     * @param int $ticket
     * @param string $queue
     * @param bool $passive
     * @param bool $durable
     * @param bool $exclusive
     * @param bool $autoDelete
     * @param bool $nowait
     * @param array $arguments
     * @return array
     */
    public function queueDeclare(
        $ticket = 1,
        $queue = '',
        $passive = false,
        $durable = false,
        $exclusive = false,
        $autoDelete = false,
        $nowait = false,
        $arguments = array()
    ) {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($queue);
        $writer->writeBits(array($passive, $durable, $exclusive, $autoDelete, $nowait));
        $writer->writeTable(empty($arguments) ? array() : $arguments);
        return array(50, 10, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function queueDeclareOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readShortstr();
        $response[] = $reader->readLong();
        $response[] = $reader->readLong();
        return $response;
    }

    /**
     * @param int $ticket
     * @param string $queue
     * @param string $exchange
     * @param string $routingKey
     * @param bool $nowait
     * @param array $arguments
     * @return array
     */
    public function queueBind(
        $ticket = 1,
        $queue = '',
        $exchange,
        $routingKey = '',
        $nowait = false,
        $arguments = array()
    ) {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($queue);
        $writer->writeShortstr($exchange);
        $writer->writeShortstr($routingKey);
        $writer->writeBits(array($nowait));
        $writer->writeTable(empty($arguments) ? array() : $arguments);
        return array(50, 20, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function queueBindOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**
     * @param int $ticket
     * @param string $queue
     * @param bool $nowait
     * @return array
     */
    public function queuePurge($ticket = 1, $queue = '', $nowait = false)
    {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($queue);
        $writer->writeBits(array($nowait));
        return array(50, 30, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function queuePurgeOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readLong();
        return $response;
    }

    /**
     * @param int $ticket
     * @param string $queue
     * @param bool $ifUnused
     * @param bool $ifEmpty
     * @param bool $nowait
     * @return array
     */
    public function queueDelete($ticket = 1, $queue = '', $ifUnused = false, $ifEmpty = false, $nowait = false)
    {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($queue);
        $writer->writeBits(array($ifUnused, $ifEmpty, $nowait));
        return array(50, 40, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function queueDeleteOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readLong();
        return $response;
    }

    /**
     * @param int $ticket
     * @param string $queue
     * @param string $exchange
     * @param string $routingKey
     * @param array $arguments
     * @return array
     */
    public function queueUnbind($ticket = 1, $queue = '', $exchange, $routingKey = '', $arguments = array())
    {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($queue);
        $writer->writeShortstr($exchange);
        $writer->writeShortstr($routingKey);
        $writer->writeTable(empty($arguments) ? array() : $arguments);
        return array(50, 50, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function queueUnbindOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**
     * @param int $prefetchSize
     * @param int $prefetchCount
     * @param bool $global
     * @return array
     */
    public function basicQos($prefetchSize = 0, $prefetchCount = 0, $global = false)
    {
        $writer = new AMQPWriter();
        $writer->writeLong($prefetchSize);
        $writer->writeShort($prefetchCount);
        $writer->writeBits(array($global));
        return array(60, 10, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function basicQosOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**
     * @param int $ticket
     * @param string $queue
     * @param string $consumerTag
     * @param bool $noLocal
     * @param bool $noAck
     * @param bool $exclusive
     * @param bool $nowait
     * @return array
     */
    public function basicConsume(
        $ticket = 1,
        $queue = '',
        $consumerTag = '',
        $noLocal = false,
        $noAck = false,
        $exclusive = false,
        $nowait = false
    ) {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($queue);
        $writer->writeShortstr($consumerTag);
        $writer->writeBits(array($noLocal, $noAck, $exclusive, $nowait));
        return array(60, 20, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function basicConsumeOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readShortstr();
        return $response;
    }

    /**
     * @param string $consumerTag
     * @param bool $nowait
     * @return array
     */
    public function basicCancel($consumerTag, $nowait = false)
    {
        $writer = new AMQPWriter();
        $writer->writeShortstr($consumerTag);
        $writer->writeBits(array($nowait));
        return array(60, 30, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function basicCancelOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readShortstr();
        return $response;
    }

    /**
     * @param int $ticket
     * @param string $exchange
     * @param string $routingKey
     * @param bool $mandatory
     * @param bool $immediate
     * @return array
     */
    public function basicPublish($ticket = 1, $exchange = '', $routingKey = '', $mandatory = false, $immediate = false)
    {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($exchange);
        $writer->writeShortstr($routingKey);
        $writer->writeBits(array($mandatory, $immediate));
        return array(60, 40, $writer);
    }

    /**
     * @param int $replyCode
     * @param string $replyText
     * @param string $exchange
     * @param string $routingKey
     * @return array
     */
    public function basicReturn($replyCode, $replyText = '', $exchange, $routingKey)
    {
        $writer = new AMQPWriter();
        $writer->writeShort($replyCode);
        $writer->writeShortstr($replyText);
        $writer->writeShortstr($exchange);
        $writer->writeShortstr($routingKey);
        return array(60, 50, $writer);
    }

    /**
     * @param string $consumerTag
     * @param int $deliveryTag
     * @param bool $redelivered
     * @param string $exchange
     * @param string $routingKey
     * @return array
     */
    public function basicDeliver($consumerTag, $deliveryTag, $redelivered = false, $exchange, $routingKey)
    {
        $writer = new AMQPWriter();
        $writer->writeShortstr($consumerTag);
        $writer->writeLonglong($deliveryTag);
        $writer->writeBits(array($redelivered));
        $writer->writeShortstr($exchange);
        $writer->writeShortstr($routingKey);
        return array(60, 60, $writer);
    }

    /**
     * @param int $ticket
     * @param string $queue
     * @param bool $noAck
     * @return array
     */
    public function basicGet($ticket = 1, $queue = '', $noAck = false)
    {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($queue);
        $writer->writeBits(array($noAck));
        return array(60, 70, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function basicGetOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readLonglong();
        $response[] = $reader->readBit();
        $response[] = $reader->readShortstr();
        $response[] = $reader->readShortstr();
        $response[] = $reader->readLong();
        return $response;
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function basicGetEmpty(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readShortstr();
        return $response;
    }

    /**
     * @param int $deliveryTag
     * @param bool $multiple
     * @return array
     */
    public function basicAck($deliveryTag = 0, $multiple = false)
    {
        $writer = new AMQPWriter();
        $writer->writeLonglong($deliveryTag);
        $writer->writeBits(array($multiple));
        return array(60, 80, $writer);
    }

    /**
     * @param int $deliveryTag
     * @param bool $requeue
     * @return array
     */
    public function basicReject($deliveryTag, $requeue = true)
    {
        $writer = new AMQPWriter();
        $writer->writeLonglong($deliveryTag);
        $writer->writeBits(array($requeue));
        return array(60, 90, $writer);
    }

    /**
     * @param bool $requeue
     * @return array
     */
    public function basicRecoverAsync($requeue = false)
    {
        $writer = new AMQPWriter();
        $writer->writeBits(array($requeue));
        return array(60, 100, $writer);
    }

    /**
     * @param bool $requeue
     * @return array
     */
    public function basicRecover($requeue = false)
    {
        $writer = new AMQPWriter();
        $writer->writeBits(array($requeue));
        return array(60, 110, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function basicRecoverOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**
     * @param int $prefetchSize
     * @param int $prefetchCount
     * @param bool $global
     * @return array
     */
    public function fileQos($prefetchSize = 0, $prefetchCount = 0, $global = false)
    {
        $writer = new AMQPWriter();
        $writer->writeLong($prefetchSize);
        $writer->writeShort($prefetchCount);
        $writer->writeBits(array($global));
        return array(70, 10, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function fileQosOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**
     * @param int $ticket
     * @param string $queue
     * @param string $consumerTag
     * @param bool $noLocal
     * @param bool $noAck
     * @param bool $exclusive
     * @param bool $nowait
     * @return array
     */
    public function fileConsume(
        $ticket = 1,
        $queue = '',
        $consumerTag = '',
        $noLocal = false,
        $noAck = false,
        $exclusive = false,
        $nowait = false
    ) {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($queue);
        $writer->writeShortstr($consumerTag);
        $writer->writeBits(array($noLocal, $noAck, $exclusive, $nowait));
        return array(70, 20, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function fileConsumeOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readShortstr();
        return $response;
    }

    /**
     * @param string $consumerTag
     * @param bool $nowait
     * @return array
     */
    public function fileCancel($consumerTag, $nowait = false)
    {
        $writer = new AMQPWriter();
        $writer->writeShortstr($consumerTag);
        $writer->writeBits(array($nowait));
        return array(70, 30, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function fileCancelOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readShortstr();
        return $response;
    }

    /**
     * @param string $identifier
     * @param int $content_size
     * @return array
     */
    public function fileOpen($identifier, $content_size)
    {
        $writer = new AMQPWriter();
        $writer->writeShortstr($identifier);
        $writer->writeLonglong($content_size);
        return array(70, 40, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function fileOpenOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readLonglong();
        return $response;
    }

    /**

     * @return array
     */
    public function fileStage()
    {
        $writer = new AMQPWriter();
        return array(70, 50, $writer);
    }

    /**
     * @param int $ticket
     * @param string $exchange
     * @param string $routingKey
     * @param bool $mandatory
     * @param bool $immediate
     * @param string $identifier
     * @return array
     */
    public function filePublish(
        $ticket = 1,
        $exchange = '',
        $routingKey = '',
        $mandatory = false,
        $immediate = false,
        $identifier
    ) {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($exchange);
        $writer->writeShortstr($routingKey);
        $writer->writeBits(array($mandatory, $immediate));
        $writer->writeShortstr($identifier);
        return array(70, 60, $writer);
    }

    /**
     * @param int $replyCode
     * @param string $replyText
     * @param string $exchange
     * @param string $routingKey
     * @return array
     */
    public function fileReturn($replyCode = 200, $replyText = '', $exchange, $routingKey)
    {
        $writer = new AMQPWriter();
        $writer->writeShort($replyCode);
        $writer->writeShortstr($replyText);
        $writer->writeShortstr($exchange);
        $writer->writeShortstr($routingKey);
        return array(70, 70, $writer);
    }

    /**
     * @param string $consumerTag
     * @param int $deliveryTag
     * @param bool $redelivered
     * @param string $exchange
     * @param string $routingKey
     * @param string $identifier
     * @return array
     */
    public function fileDeliver(
        $consumerTag,
        $deliveryTag,
        $redelivered = false,
        $exchange,
        $routingKey,
        $identifier
    ) {
        $writer = new AMQPWriter();
        $writer->writeShortstr($consumerTag);
        $writer->writeLonglong($deliveryTag);
        $writer->writeBits(array($redelivered));
        $writer->writeShortstr($exchange);
        $writer->writeShortstr($routingKey);
        $writer->writeShortstr($identifier);
        return array(70, 80, $writer);
    }

    /**
     * @param int $deliveryTag
     * @param bool $multiple
     * @return array
     */
    public function fileAck($deliveryTag = 0, $multiple = false)
    {
        $writer = new AMQPWriter();
        $writer->writeLonglong($deliveryTag);
        $writer->writeBits(array($multiple));
        return array(70, 90, $writer);
    }

    /**
     * @param int $deliveryTag
     * @param bool $requeue
     * @return array
     */
    public function fileReject($deliveryTag, $requeue = true)
    {
        $writer = new AMQPWriter();
        $writer->writeLonglong($deliveryTag);
        $writer->writeBits(array($requeue));
        return array(70, 100, $writer);
    }

    /**
     * @param int $prefetchSize
     * @param int $prefetchCount
     * @param int $consume_rate
     * @param bool $global
     * @return array
     */
    public function streamQos($prefetchSize = 0, $prefetchCount = 0, $consume_rate = 0, $global = false)
    {
        $writer = new AMQPWriter();
        $writer->writeLong($prefetchSize);
        $writer->writeShort($prefetchCount);
        $writer->writeLong($consume_rate);
        $writer->writeBits(array($global));
        return array(80, 10, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function streamQosOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**
     * @param int $ticket
     * @param string $queue
     * @param string $consumerTag
     * @param bool $noLocal
     * @param bool $exclusive
     * @param bool $nowait
     * @return array
     */
    public function streamConsume(
        $ticket = 1,
        $queue = '',
        $consumerTag = '',
        $noLocal = false,
        $exclusive = false,
        $nowait = false
    ) {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($queue);
        $writer->writeShortstr($consumerTag);
        $writer->writeBits(array($noLocal, $exclusive, $nowait));
        return array(80, 20, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function streamConsumeOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readShortstr();
        return $response;
    }

    /**
     * @param string $consumerTag
     * @param bool $nowait
     * @return array
     */
    public function streamCancel($consumerTag, $nowait = false)
    {
        $writer = new AMQPWriter();
        $writer->writeShortstr($consumerTag);
        $writer->writeBits(array($nowait));
        return array(80, 30, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function streamCancelOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readShortstr();
        return $response;
    }

    /**
     * @param int $ticket
     * @param string $exchange
     * @param string $routingKey
     * @param bool $mandatory
     * @param bool $immediate
     * @return array
     */
    public function streamPublish(
        $ticket = 1,
        $exchange = '',
        $routingKey = '',
        $mandatory = false,
        $immediate = false
    ) {
        $writer = new AMQPWriter();
        $writer->writeShort($ticket);
        $writer->writeShortstr($exchange);
        $writer->writeShortstr($routingKey);
        $writer->writeBits(array($mandatory, $immediate));
        return array(80, 40, $writer);
    }

    /**
     * @param int $replyCode
     * @param string $replyText
     * @param string $exchange
     * @param string $routingKey
     * @return array
     */
    public function streamReturn($replyCode = 200, $replyText = '', $exchange, $routingKey)
    {
        $writer = new AMQPWriter();
        $writer->writeShort($replyCode);
        $writer->writeShortstr($replyText);
        $writer->writeShortstr($exchange);
        $writer->writeShortstr($routingKey);
        return array(80, 50, $writer);
    }

    /**
     * @param string $consumerTag
     * @param int $deliveryTag
     * @param string $exchange
     * @param string $queue
     * @return array
     */
    public function streamDeliver($consumerTag, $deliveryTag, $exchange, $queue)
    {
        $writer = new AMQPWriter();
        $writer->writeShortstr($consumerTag);
        $writer->writeLonglong($deliveryTag);
        $writer->writeShortstr($exchange);
        $writer->writeShortstr($queue);
        return array(80, 60, $writer);
    }

    /**

     * @return array
     */
    public function txSelect()
    {
        $writer = new AMQPWriter();
        return array(90, 10, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function txSelectOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**

     * @return array
     */
    public function txCommit()
    {
        $writer = new AMQPWriter();
        return array(90, 20, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function txCommitOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**

     * @return array
     */
    public function txRollback()
    {
        $writer = new AMQPWriter();
        return array(90, 30, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function txRollbackOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**

     * @return array
     */
    public function dtxSelect()
    {
        $writer = new AMQPWriter();
        return array(100, 10, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function dtxSelectOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**
     * @param string $dtx_identifier
     * @return array
     */
    public function dtxStart($dtx_identifier)
    {
        $writer = new AMQPWriter();
        $writer->writeShortstr($dtx_identifier);
        return array(100, 20, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function dtxStartOk(AMQPReader $reader)
    {
        $response = array();
        return $response;
    }

    /**
     * @param mixed $meta_data
     * @return array
     */
    public function tunnelRequest($meta_data)
    {
        $writer = new AMQPWriter();
        $writer->writeTable(empty($meta_data) ? array() : $meta_data);
        return array(110, 10, $writer);
    }

    /**
     * @param mixed $integer_1
     * @param int $integer_2
     * @param int $integer_3
     * @param int $integer_4
     * @param mixed $operation
     * @return array
     */
    public function testInteger($integer_1, $integer_2, $integer_3, $integer_4, $operation)
    {
        $writer = new AMQPWriter();
        $writer->writeOctet($integer_1);
        $writer->writeShort($integer_2);
        $writer->writeLong($integer_3);
        $writer->writeLonglong($integer_4);
        $writer->writeOctet($operation);
        return array(120, 10, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function testIntegerOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readLonglong();
        return $response;
    }

    /**
     * @param string $string_1
     * @param string $string_2
     * @param mixed $operation
     * @return array
     */
    public function testString($string_1, $string_2, $operation)
    {
        $writer = new AMQPWriter();
        $writer->writeShortstr($string_1);
        $writer->writeLongstr($string_2);
        $writer->writeOctet($operation);
        return array(120, 20, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function testStringOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readLongstr();
        return $response;
    }

    /**
     * @param mixed $table
     * @param mixed $integer_op
     * @param mixed $string_op
     * @return array
     */
    public function testTable($table, $integer_op, $string_op)
    {
        $writer = new AMQPWriter();
        $writer->writeTable(empty($table) ? array() : $table);
        $writer->writeOctet($integer_op);
        $writer->writeOctet($string_op);
        return array(120, 30, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function testTableOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readLonglong();
        $response[] = $reader->readLongstr();
        return $response;
    }

    /**

     * @return array
     */
    public function testContent()
    {
        $writer = new AMQPWriter();
        return array(120, 40, $writer);
    }

    /**
     * @param AMQPReader $reader
     * @return array
     */
    public static function testContentOk(AMQPReader $reader)
    {
        $response = array();
        $response[] = $reader->readLong();
        return $response;
    }
}
